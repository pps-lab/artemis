---

$SUITE_ID$:
  model-small: 1234 # TODO [nku] SET THE RUN IDS OF THE RESULTS
  model-mid: 1234
  model-diffusion: 1234
  model-gpt2: 1234


$ETL$:
  grid:
    experiments:
      model-small: "*"
      model-mid: "*"
      model-diffusion: "*"
      model-gpt2: "*"
    extractors:
      # TODO [nku] update the extractors
      YamlExtractor: {} # with default file_regex
      ErrorExtractor: {} # if a non-empty file exists matching the default regex -> then we throw an error using the ErrorExtractor
      IgnoreExtractor: {} # since we want that each file is processed by an extractor, we provide the IgnoreExtractor which can be used to ignore certain files. (e.g., stdout)
    # TODO [nku] set the transformers -> aggregate the verfier times here into some aggregate column and an error column
    transformers: []
    loaders:
      # TODO [nku] LEGEND LOCATION -> maybe 1row 5col legend at the top?
      ColumnCrossPlotLoader:
        data_filter:
          allowed:
            model: [mnist, snet, resnet18, dlrm, mobilenet, vgg, gpt2, diffusion]
            cpsnark: [no_com, cp_link, cp_link+, poly, poseidon]
            pc_type: [kzg, ipa]

        fig_foreach:
          cols: [$metrics$] # separate figure for prover and verifier
          # jp_except...

        subplot_grid:
          rows: [pc_type]
          cols: [model]   #$metrics$
          share_y: none
          share_x: none
          kwargs:
            constrained_layout: True
          # jp_except: "(orient == 'W') || (orient == 'E')"


        # define metrics (select the data columns)
        metrics:
        # TODO [nku] SELECT THE PROPER COLUMNS TO CONSTRUCT VALUE AND ERROR COLS
          prover_time:
            value_cols: [base_s_mean, overhead1_s_mean, overhead2_s_mean]
            error_cols: [base_s_std, overhead1_s_std, overhead2_s_std]
            #value_divider: 1.0
            #value_multiplier: 1.0
            unit_label: sec

          verifier_time:
            value_cols: [base_s_mean, overhead1_s_mean, overhead2_s_mean]
            error_cols: [base_s_std, overhead1_s_std, overhead2_s_std]
            #value_divider: 1.0
            #value_multiplier: 1.0
            unit_label: sec

          #memory:
          #  value_cols: [base_mb_mean, overhead_mb_mean]
          #  error_cols: [base_mb_std, overhead_mb_std]
          #  #value_divider: 1.0
          #  #value_multiplier: 1.0
          #  unit_label: MB

        ########## Configure each Subplot:

        cum_subplot_config:

        - jp_query: (subplot_col_idx == `0`)
          legend_ax: {}
          yaxis:
            label: {template: "{$metrics$} [{$metric_unit$}]"}
            major_formatter: round_short

        - jp_query: (subplot_row_idx == `0`)
          ax_title: {template: "{model}"}

        - xaxis: # TODO [nku] NOT SURE WHETHER TICKS NECESSARY
            tick_params:
            - {axis: x, which: both, labelsize: 8}
            - {axis: x, which: major, pad: 10}

          chart:
            #group_padding: 0.5
            #group_foreach:
            #  cols: [system_config]
            #  label: {template: "{system_config}"}

            bar_foreach:
              cols: [cpsnark]
              #jp_except:  "(to_number(y) == `5`)"
              label: {template: ""}  # due to space constraints want to use color for this
            #part_foreach:
            #  cols: [run]

          # [no_com, cp_link, cp_link+, poly, poseidon]


          ###### Configure each element (artist) in subfigure (ax)
          cum_artist_config:
          - label: {template: "{cpsnark}"}  # TODO [nku] set a good color scheme
          - color: grey
            jp_query: starts_with(cpsnark, 'no_com')
          - color: red
            jp_query: starts_with(cpsnark, 'cp_link')
          - color: green
            jp_query: starts_with(cpsnark, 'cp_link+')
          - color: yellow
            jp_query: starts_with(cpsnark, 'poly')
          - color: pink
            jp_query: starts_with(cpsnark, 'poseidon')

          label_map:
            no_com: No commitment
            cp_link: CPLink (slow)
            cp_link+: CPLink adapted, fast
            poly: Polynomial circuit (Horner's method)
            poseidon: Poseidon

            mnist: MNIST~10k
            snet: SNET~100k
            resnet18: ResNet18~280k
            dlrm: DLRM~750k
            mobilenet: MOBILENET~3.5m
            vgg: VGG~15m
            gpt2: GPT2~81m
            diffusion: DIFFUSION~19.5m

            kzg: KZG
            ipa: IPA

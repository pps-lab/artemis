warning: unnecessary parentheses around index expression
   --> halo2/halo2_proofs/src/fft/parallel.rs:123:54
    |
123 |         t1[arithmetic::bitreverse(i, log_split)] = a[(i * sub_n + sub_fft_offset)];
    |                                                      ^                          ^
    |
    = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
    |
123 -         t1[arithmetic::bitreverse(i, log_split)] = a[(i * sub_n + sub_fft_offset)];
123 +         t1[arithmetic::bitreverse(i, log_split)] = a[i * sub_n + sub_fft_offset];
    |

warning: unused doc comment
   --> halo2/halo2_proofs/src/dev/graph/layout.rs:366:13
    |
366 | /             /// Any cells assigned outside of a region. We store this as a `Vec` so that if any
367 | |             /// cells are double-assigned, they will be visibly darker.
    | |_______________________________________________________________________^
368 |               loose_cells: vec![],
    |               ------------------- rustdoc does not generate documentation for expression fields
    |
    = help: use `//` for a plain comment
    = note: `#[warn(unused_doc_comments)]` on by default

warning: unused doc comment
   --> halo2/halo2_proofs/src/dev/graph/layout.rs:369:13
    |
369 |             /// Pairs of cells between which we have equality constraints.
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
370 |             equality: vec![],
    |             ---------------- rustdoc does not generate documentation for expression fields
    |
    = help: use `//` for a plain comment

warning: unused doc comment
   --> halo2/halo2_proofs/src/dev/graph/layout.rs:371:13
    |
371 |             /// Selector assignments used for optimization pass
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
372 |             selectors: vec![vec![false; n]; num_selectors],
    |             ---------------------------------------------- rustdoc does not generate documentation for expression fields
    |
    = help: use `//` for a plain comment

warning: unused variable: `timer`
   --> halo2/halo2_proofs/src/plonk/verifier.rs:217:13
    |
217 |         let timer = Instant::now();
    |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_timer`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: variable does not need to be mutable
   --> halo2/halo2_proofs/src/poly/domain.rs:272:37
    |
272 |     pub fn coeff_to_lagrange(&self, mut a: Polynomial<F, Coeff>) -> Polynomial<F, LagrangeCoeff> {
    |                                     ----^
    |                                     |
    |                                     help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: struct `PointIndex` is never constructed
    --> halo2/halo2_proofs/src/plonk/circuit.rs:1423:19
     |
1423 | pub(crate) struct PointIndex(pub usize);
     |                   ^^^^^^^^^^
     |
     = note: `#[warn(dead_code)]` on by default

warning: `halo2_proofs` (lib) generated 7 warnings (run `cargo fix --lib -p halo2_proofs` to apply 2 suggestions)
warning: non-local `impl` definition, they should be avoided as they go against expectation
   --> halo2/halo2_gadgets/src/ecc/chip/mul.rs:426:5
    |
426 | /     construct_uint! {
427 | |         struct U256(4);
428 | |     }
    | |_____^
    |
    = help: move this `impl` block outside the of the current function `decompose_for_scalar_mul`
    = note: an `impl` definition is non-local if it is nested inside an item and may impact type checking outside of that item. This can be the case if neither the trait or the self type are at the same nesting level as the `impl`
    = note: one exception to the rule are anon-const (`const _: () = { ... }`) at top-level module and anon-const at the same nesting as the trait or type
    = note: this lint may become deny-by-default in the edition 2024 and higher, see the tracking issue <https://github.com/rust-lang/rust/issues/120363>
    = note: the macro `$crate::impl_mul_for_primitive` may come from an old version of the `uint` crate, try updating your dependency with `cargo update -p uint`
    = note: `#[warn(non_local_definitions)]` on by default
    = note: this warning originates in the macro `$crate::impl_mul_for_primitive` which comes from the expansion of the macro `construct_uint` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: non-local `impl` definition, they should be avoided as they go against expectation
   --> halo2/halo2_gadgets/src/ecc/chip/mul.rs:426:5
    |
426 | /     construct_uint! {
427 | |         struct U256(4);
428 | |     }
    | |_____^
    |
    = help: move this `impl` block outside the of the current function `decompose_for_scalar_mul`
    = note: an `impl` definition is non-local if it is nested inside an item and may impact type checking outside of that item. This can be the case if neither the trait or the self type are at the same nesting level as the `impl`
    = note: one exception to the rule are anon-const (`const _: () = { ... }`) at top-level module and anon-const at the same nesting as the trait or type
    = note: this lint may become deny-by-default in the edition 2024 and higher, see the tracking issue <https://github.com/rust-lang/rust/issues/120363>
    = note: the macro `$crate::impl_mul_for_primitive` may come from an old version of the `uint` crate, try updating your dependency with `cargo update -p uint`
    = note: this warning originates in the macro `$crate::impl_mul_for_primitive` which comes from the expansion of the macro `construct_uint` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `halo2_gadgets` (lib) generated 19 warnings (17 duplicates)
warning: unused imports: `Expression`, `impl_add_binop_specify_output`
 --> src/gadgets/poly.rs:5:33
  |
5 |   halo2curves::{ff::PrimeField, impl_add_binop_specify_output},
  |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
6 |   plonk::{Advice, Column, ConstraintSystem, Error, Expression},
  |                                                    ^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `rmp_serde::config`
 --> src/gadgets/poly.rs:9:5
  |
9 | use rmp_serde::config;
  |     ^^^^^^^^^^^^^^^^^

warning: unused import: `adder::AdderChip`
  --> src/gadgets/poly.rs:11:22
   |
11 | use crate::gadgets::{adder::AdderChip, dot_prod::DotProductChip};
   |                      ^^^^^^^^^^^^^^^^

warning: unused imports: `fs::File`, `io::BufWriter`
 --> src/layers/dag.rs:1:33
  |
1 | use std::{collections::HashMap, fs::File, io::BufWriter, marker::PhantomData, rc::Rc};
  |                                 ^^^^^^^^  ^^^^^^^^^^^^^

warning: unused imports: `convert_to_u64`, `utils::helpers::print_assigned_arr`
  --> src/layers/dag.rs:6:21
   |
6  |   gadgets::gadget::{convert_to_u64, GadgetConfig},
   |                     ^^^^^^^^^^^^^^
...
33 |   utils::helpers::print_assigned_arr,
   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `AssignedCell`, `poly`
  --> src/model.rs:9:13
   |
9  |   circuit::{AssignedCell, Layouter, SimpleFloorPlanner, Value},
   |             ^^^^^^^^^^^^
10 |   halo2curves::ff::{FromUniformBytes, PrimeField},
11 |   plonk::{Advice, Circuit, Column, ConstraintSystem, Error, Instance}, poly,
   |                                                                        ^^^^

warning: unused import: `rmp_serde::config`
  --> src/model.rs:16:5
   |
16 | use rmp_serde::config;
   |     ^^^^^^^^^^^^^^^^^

warning: unused variable: `columns`
  --> src/gadgets/poly.rs:40:9
   |
40 |     let columns = &gadget_config.columns;
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_columns`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `zero`
   --> src/gadgets/poly.rs:157:9
    |
157 |     let zero = &single_inputs[0];
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_zero`

warning: unused variable: `a_cols`
   --> src/gadgets/poly.rs:165:13
    |
165 |         let a_cols = a_i
    |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_a_cols`

warning: variable does not need to be mutable
   --> src/gadgets/poly.rs:159:9
    |
159 |     let mut a_i = vec_inputs[0].clone();
    |         ----^^^
    |         |
    |         help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
   --> src/gadgets/poly.rs:160:9
    |
160 |     let mut b_i = vec_inputs[1].clone();
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `print_arr`
   --> src/layers/dag.rs:465:9
    |
465 |     let print_arr = if final_out.len() > 0 {
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_print_arr`

warning: unused variable: `num_cols`
   --> src/model.rs:308:86
    |
308 |   pub fn generate_from_file(config_file: &str, inp_file: &str, witness_column: bool, num_cols: i64) -> ModelCircuit<F> {
    |                                                                                      ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_num_cols`

warning: variable does not need to be mutable
   --> src/model.rs:309:9
    |
309 |     let mut config = load_model_msgpack(config_file, inp_file, witness_column);
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `beta`
   --> src/model.rs:868:15
    |
868 |           let beta = F::ONE;
    |               ^^^^ help: if this is intentional, prefix it with an underscore: `_beta`

warning: unused variable: `row_idx`
   --> src/model.rs:875:19
    |
875 |               let row_idx = cell_idx / columns.len();
    |                   ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_row_idx`

warning: unused variable: `col_idx`
   --> src/model.rs:876:19
    |
876 |               let col_idx = cell_idx % columns.len();
    |                   ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_col_idx`

warning: unused variable: `region`
   --> src/model.rs:866:14
    |
866 |         |mut region| {
    |              ^^^^^^ help: if this is intentional, prefix it with an underscore: `_region`

warning: variable does not need to be mutable
   --> src/model.rs:866:10
    |
866 |         |mut region| {
    |          ----^^^^^^
    |          |
    |          help: remove this `mut`

warning: unused variable: `witness_column`
  --> src/utils/loader.rs:40:47
   |
40 | pub fn load_config_msgpack(config_path: &str, witness_column: bool) -> ModelMsgpack {
   |                                               ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_witness_column`

warning: variable does not need to be mutable
  --> src/utils/loader.rs:41:7
   |
41 |   let mut model: ModelMsgpack = {
   |       ----^^^^^
   |       |
   |       help: remove this `mut`

warning: using `.clone()` on a double reference, which returns `&AssignedCell<F, F>` instead of cloning the inner type
   --> src/gadgets/dot_prod.rs:190:77
    |
190 |               .op_row_region(&mut region, i, &vec![inp, weights], &vec![zero.clone()])
    |                                                                             ^^^^^^^^
    |
    = note: `#[warn(suspicious_double_ref_op)]` on by default

warning: `zkml` (lib) generated 23 warnings (run `cargo fix --lib -p zkml` to apply 12 suggestions)
warning: unused import: `halo2_proofs::arithmetic::lagrange_interpolate`
 --> src/bin/cp_link.rs:5:5
  |
5 | use halo2_proofs::arithmetic::lagrange_interpolate;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `halo2curves::bn256::Fr`
 --> src/bin/cp_link.rs:7:5
  |
7 | use halo2curves::bn256::Fr;
  |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `halo2_proofs::plonk::*`
  --> src/bin/cp_link.rs:10:5
   |
10 | use halo2_proofs::plonk::*;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `halo2curves::bn256::Gt`
  --> src/bin/cp_link.rs:11:5
   |
11 | use halo2curves::bn256::Gt;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `halo2curves::bn256::G1`
  --> src/bin/cp_link.rs:12:5
   |
12 | use halo2curves::bn256::G1;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `MultiMillerLoop`
  --> src/bin/cp_link.rs:13:36
   |
13 | use halo2curves::pairing::{Engine, MultiMillerLoop};
   |                                    ^^^^^^^^^^^^^^^

warning: unused import: `halo2curves::pasta::pallas::Scalar`
  --> src/bin/cp_link.rs:15:5
   |
15 | use halo2curves::pasta::pallas::Scalar;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `rand::RngCore`
  --> src/bin/cp_link.rs:20:5
   |
20 | use rand::RngCore;
   |     ^^^^^^^^^^^^^

warning: unused import: `zkml::gadgets::square`
  --> src/bin/cp_link.rs:22:5
   |
22 | use zkml::gadgets::square;
   |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Add`, `Div`, `Neg`, `Sub`
  --> src/bin/cp_link.rs:24:16
   |
24 | use std::ops::{Add, Div, Mul, Neg, Sub};
   |                ^^^  ^^^       ^^^  ^^^

warning: unused imports: `Args`, `args`
  --> src/bin/cp_link.rs:26:22
   |
26 | use std::env::{self, args, Args};
   |                      ^^^^  ^^^^

warning: unused import: `std::fs`
  --> src/bin/cp_link.rs:27:5
   |
27 | use std::fs;
   |     ^^^^^^^

warning: unused import: `std::collections::BTreeMap`
  --> src/bin/cp_link.rs:28:5
   |
28 | use std::collections::BTreeMap;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `num_traits::Pow`
  --> src/bin/cp_link.rs:18:5
   |
18 | use num_traits::Pow;
   |     ^^^^^^^^^^^^^^^

warning: unused variable: `timer`
   --> src/bin/cp_link.rs:182:13
    |
182 |         let timer = Instant::now();
    |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_timer`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `rng`
   --> src/bin/cp_link.rs:253:9
    |
253 |     let rng = OsRng;
    |         ^^^ help: if this is intentional, prefix it with an underscore: `_rng`

warning: unused variable: `val`
   --> src/bin/cp_link.rs:269:9
    |
269 |     for val in HH_vals[l * size..].iter() {
    |         ^^^ help: if this is intentional, prefix it with an underscore: `_val`

warning: unused variable: `val`
   --> src/bin/cp_link.rs:272:9
    |
272 |     for val in HH_vals {
    |         ^^^ help: if this is intentional, prefix it with an underscore: `_val`

warning: unused variable: `qus_timer`
   --> src/bin/cp_link.rs:316:9
    |
316 |     let qus_timer = Instant::now();
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_qus_timer`

warning: unused variable: `HH_vals`
   --> src/bin/cp_link.rs:318:9
    |
318 |     let HH_vals: Vec<E::Scalar> = powers(HH.get_omega()).take(10).collect();
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_HH_vals`

warning: unused variable: `rng`
   --> src/bin/cp_link.rs:320:9
    |
320 |     let rng = OsRng;
    |         ^^^ help: if this is intentional, prefix it with an underscore: `_rng`

warning: unused variable: `bigqu_timer`
   --> src/bin/cp_link.rs:334:9
    |
334 |     let bigqu_timer = Instant::now();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_bigqu_timer`

warning: unused variable: `vanishing_poly`
   --> src/bin/cp_link.rs:346:9
    |
346 |     let vanishing_poly = HH.coeff_from_vec(vanishing);
    |         ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_vanishing_poly`

warning: unused variable: `rem`
   --> src/bin/cp_link.rs:389:13
    |
389 |     let (w, rem) = (otilde - &Polynomial::from_coefficients_vec(vec![z])).divide_with_q_and_r(&Polynomial::from_coefficients_vec(vec![-x,...
    |             ^^^ help: if this is intentional, prefix it with an underscore: `_rem`

warning: unused variable: `z_last`
   --> src/bin/cp_link.rs:303:5
    |
303 |     z_last: Polynomial<E::Scalar, Coeff>,
    |     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_z_last`

warning: unused variable: `rho_evals`
   --> src/bin/cp_link.rs:447:9
    |
447 |     let rho_evals = [h_evals, vec![zv_eval], u_evals].concat();
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_rho_evals`

warning: unused variable: `poly_coms`
   --> src/bin/cp_link.rs:449:9
    |
449 |     let poly_coms = [h_coms, vec![z_v_com], u_coms].concat();
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_poly_coms`

warning: unused variable: `randos`
   --> src/bin/cp_link.rs:450:9
    |
450 |     let randos = polys.iter().map(|_| E::Scalar::random(rng.clone())).collect::<Vec<_>>();
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_randos`

warning: unused variable: `uprime_evals`
   --> src/bin/cp_link.rs:461:9
    |
461 |     let uprime_evals = uprimes.iter().zip(thetas).map(|(uprime, theta)| uprime.evaluate(rho*theta)).collect::<Vec<_>>();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_uprime_evals`

warning: unused variable: `r`
   --> src/bin/cp_link.rs:432:17
    |
432 |         let (h, r) = poly_divmod(&(u.clone() - &uprime_shift), &z_v);
    |                 ^ help: if this is intentional, prefix it with an underscore: `_r`

warning: unused variable: `rng`
   --> src/bin/cp_link.rs:521:9
    |
521 |     let rng = &mut OsRng;
    |         ^^^ help: if this is intentional, prefix it with an underscore: `_rng`

warning: unused variable: `vanishing_both`
   --> src/bin/cp_link.rs:571:9
    |
571 |     let vanishing_both = vanishing1.clone() * &vanishing2;
    |         ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_vanishing_both`

warning: function `interpolate` is never used
   --> src/bin/cp_link.rs:221:4
    |
221 | fn interpolate<F: WithSmallOrderMulGroup<3>> (vals: Vec<F>, domain: EvaluationDomain<F>) -> Polynomial<F, Coeff> {
    |    ^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: variable `HH` should have a snake case name
   --> src/bin/cp_link.rs:250:9
    |
250 |     let HH = EvaluationDomain::<E::Scalar>::new(1, col_size);
    |         ^^ help: convert the identifier to snake case: `hh`
    |
    = note: `#[warn(non_snake_case)]` on by default

warning: variable `HH_vals` should have a snake case name
   --> src/bin/cp_link.rs:257:9
    |
257 |     let HH_vals = powers(HH.get_omega()).take(n as usize).collect::<Vec<_>>();
    |         ^^^^^^^ help: convert the identifier to snake case: `hh_vals`

warning: variable `HH` should have a snake case name
   --> src/bin/cp_link.rs:304:5
    |
304 |     HH: EvaluationDomain<E::Scalar>,
    |     ^^ help: convert the identifier to snake case: `hh`

warning: variable `HH_vals` should have a snake case name
   --> src/bin/cp_link.rs:318:9
    |
318 |     let HH_vals: Vec<E::Scalar> = powers(HH.get_omega()).take(10).collect();
    |         ^^^^^^^ help: convert the identifier to snake case: `hh_vals`

warning: variable `HH` should have a snake case name
   --> src/bin/cp_link.rs:397:5
    |
397 |     HH: EvaluationDomain<E::Scalar>, 
    |     ^^ help: convert the identifier to snake case: `hh`

warning: variable `HH` should have a snake case name
   --> src/bin/cp_link.rs:523:14
    |
523 |     let (ck, HH, thetas, zs, z_v, z_last, zhats, z_coms, zhat_coms) = setup::<P>(col_size as u32, witness_size, l);
    |              ^^ help: convert the identifier to snake case: `hh`

warning: variable `HH` should have a snake case name
   --> src/bin/cp_link.rs:558:9
    |
558 |     let HH = EvaluationDomain::<F>::new(1, 4);
    |         ^^ help: convert the identifier to snake case: `hh`

warning: `zkml` (bin "cp_link" test) generated 40 warnings (run `cargo fix --bin "cp_link" --tests` to apply 13 suggestions)
    Finished `release` profile [optimized] target(s) in 0.09s
     Running unittests src/bin/cp_link.rs (target/release/deps/cp_link-e5a2edf072a61d33)

running 1 test
Size: 100, n: 1024, col_size 10
Generating stuff: 1.736461833s
Polys time: 1.992206666s
Setup time: 2.242979333s
Construct polys: 9.4135ms
CPlink 2 time: 123.991083ms
Commitment time: 145.786125ms
CPLink1 time: 1.097693875s
Prover time: 1.23192025s
Verifier time: 35.083875ms
test test_cplink ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out; finished in 3.51s

